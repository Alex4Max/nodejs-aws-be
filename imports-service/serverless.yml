
service:
  name: imports-service
  import:
    - authorizerArn:
       Fn::ImportValue: "basicAuthorizerArn"

frameworkVersion: '2'

plugins:
  - serverless-webpack
  - serverless-dotenv-plugin

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-1
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
    SQS_URL: "${cf:product-service-${self:provider.stage}.SQSQueueUrl}"

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource:
         - "arn:aws:s3:::bucket-for-files"
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource:
        - "arn:aws:s3:::bucket-for-files/*"
    - Effect: "Allow"
      Action:
        - "sqs:*"
      Resource:
        - "${cf:product-service-${self:provider.stage}.ProductQueueArn}"

functions:
  importProductsFile:
    handler: handler.importProductsFile
    events:
      - http:
          method: get
          path: import
          cors: true,
          request:
            parameters:
            querystrings:
            name: true
          authorizer:
            name: BasicAuthorizer
            arn: "${cf:authorization-service-${self:provider.stage}.BasicAuthorizerLambdaFunctionQualifiedArn}"
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token

  parseImportedFile:
    handler: handler.importFileParser
    events:
      - s3:
          bucket: bucket-for-files
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/
          existing: true

resources:
  Resources:
    AccessDeniedResponse:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin:  "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers:  "'*'"

        ResponseTemplates:
          "application/json": '{ "message": "Access denied!!!" }'

        ResponseType: ACCESS_DENIED
        RestApiId: !Ref ApiGatewayRestApi
        StatusCode: '403'

    UnauthorizedResponse:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin:  "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers:  "'*'"

        ResponseTemplates:
          "application/json": '{ "message": "Unauthorized!" }'

        ResponseType: UNAUTHORIZED
        RestApiId: !Ref ApiGatewayRestApi
        StatusCode: '401'
